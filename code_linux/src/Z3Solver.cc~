#include "../include/Z3Solver.h"

using namespace z3;

Z3Solver::Z3Solver() {
}

Z3Solver::~Z3Solver(){
}

void Z3Solver::test_method(z3::context& c, z3::solver& s1) {
        

            try {        
        context ctx;        
        Z3_string str = "(declare-const x1 Int) (assert (> x1 0)) (declare-const x2 Int) (assert (not (< x2 100)))"; //Generated by some other function
        expr fs(ctx, Z3_parse_smtlib2_string(Z3_context(ctx), str, 0, 0, 0, 0, 0, 0));

        solver s(ctx);
        s.add(fs);
        check_result cr = s.check();

        model aaa(ctx, s.get_model());
        int num_constants = aaa.num_consts();
        for (int i = 0; i < num_constants; i++) {
            func_decl fd = aaa.get_const_decl(i);
            z3::expr r = aaa.get_const_interp(fd);
            std::cout << "Expr is " << r << std::endl;
        }
    }
    catch (z3::exception e) {
        std::cout << e.msg() << std::endl;
    }
}

